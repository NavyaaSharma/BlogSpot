{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport Layout from '../../../../components/Layout';\nimport { withRouter } from 'next/router';\nimport { resetPassword } from '../../../../actions/auth';\n\nconst ResetPassword = ({\n  router\n}) => {\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    name: '',\n    newPassword: '',\n    error: '',\n    message: '',\n    showForm: true\n  });\n  const {\n    showForm,\n    name,\n    newPassword,\n    error,\n    message\n  } = values;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    resetPassword({\n      newPassword,\n      resetPasswordLink: router.query.id\n    }).then(data => {\n      if (data.error) {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          error: data.error,\n          showForm: false,\n          newPassword: ''\n        }));\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          message: data.message,\n          showForm: false,\n          newPassword: '',\n          error: false\n        }));\n      }\n    });\n  };\n\n  const passwordResetForm = () => __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: \"form-group pt-5\"\n  }, __jsx(\"input\", {\n    type: \"password\",\n    onChange: e => setValues(_objectSpread(_objectSpread({}, values), {}, {\n      newPassword: e.target.value\n    })),\n    className: \"form-control\",\n    value: newPassword,\n    placeholder: \"Type new password\",\n    required: true\n  })), __jsx(\"div\", null, __jsx(\"button\", {\n    className: \"btn btn-primary\"\n  }, \"Change password\")));\n\n  const showError = () => error ? __jsx(\"div\", {\n    className: \"alert alert-danger\"\n  }, error) : '';\n\n  const showMessage = () => message ? __jsx(\"div\", {\n    className: \"alert alert-success\"\n  }, message) : '';\n\n  return __jsx(\"div\", {\n    className: \"content2\"\n  }, __jsx(Layout, null, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"h2\", null, \"Reset password\"), __jsx(\"hr\", null), showError(), showMessage(), passwordResetForm())));\n};\n\nexport default withRouter(ResetPassword);","map":null,"metadata":{},"sourceType":"module"}