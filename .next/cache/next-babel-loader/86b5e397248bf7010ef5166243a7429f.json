{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth } from './auth';\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/user/blog`;\n  }\n\n  return fetch(`${API}/blog`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    return response.json();\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(result => {\n    return result.json();\n  });\n};\nexport const singleBlog = slug => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n  return fetch(`${API}/blogs/related`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(blog)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const list = () => {\n  return fetch(`${API}/blogs`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listSearch = params => {\n  console.log('search params', params);\n  let query = queryString.stringify(params);\n  console.log('query params', query);\n  return fetch(`${API}/blogs/search?${query}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["C:/Users/Navyaa Sharma/Documents/MyProjects/seo blog/frontend/actions/blog.js"],"names":["fetch","API","queryString","isAuth","createBlog","blog","token","createBlogEndpoint","role","method","headers","Accept","Authorization","body","then","response","json","catch","err","console","log","listBlogsWithCategoriesAndTags","skip","limit","data","JSON","stringify","result","singleBlog","slug","listRelated","list","removeBlog","updateBlog","listSearch","params","query"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch'\r\nimport {API} from '../config'\r\nimport queryString from 'query-string';\r\nimport { isAuth } from './auth';\r\n\r\nexport const createBlog=(blog,token)=>{\r\n    let createBlogEndpoint;\r\n\r\n    if (isAuth() && isAuth().role === 1) {\r\n        createBlogEndpoint = `${API}/blog`;\r\n    } else if (isAuth() && isAuth().role === 0) {\r\n        createBlogEndpoint = `${API}/user/blog`;\r\n    }\r\n    return fetch(`${API}/blog`,{\r\n        method:'POST',\r\n        headers:{\r\n            Accept:'application/json',\r\n            Authorization:`Bearer ${token}`\r\n        },\r\n        body:blog\r\n    }).then((response)=>{\r\n        return response.json()\r\n    }).catch((err)=>{\r\n        console.log(err)\r\n    })\r\n    \r\n}\r\n\r\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\r\n    const data = {\r\n        limit,\r\n        skip\r\n    };\r\n    return fetch(`${API}/blogs-categories-tags`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type':'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n    .then(result=>{\r\n            return result.json() })\r\n};\r\n\r\nexport const singleBlog = slug => {\r\n    return fetch(`${API}/blog/${slug}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const listRelated = blog => {\r\n    return fetch(`${API}/blogs/related`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(blog)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const list = () => {\r\n    return fetch(`${API}/blogs`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const removeBlog = (slug, token) => {\r\n    return fetch(`${API}/blog/${slug}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const updateBlog = (blog, token, slug) => {\r\n    return fetch(`${API}/blog/${slug}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: blog\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const listSearch = params => {\r\n    console.log('search params', params);\r\n    let query = queryString.stringify(params);\r\n    console.log('query params', query);\r\n    return fetch(`${API}/blogs/search?${query}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};"]},"metadata":{},"sourceType":"module"}